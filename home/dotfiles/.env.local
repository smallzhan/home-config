####### .env.local ####################
#export PATH="/Library/TeX/texbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin"
#=======virtualenvs============
#export WORKON_HOME=$HOME/.venvs
#export VIRTUALENVWRAPPER_SCRIPT=/usr/local/bin/virtualenvwrapper.sh
#source /usr/local/bin/virtualenvwrapper_lazy.sh
export PROJECT_HOME=$HOME/Projects
#========gpg key=======
export GPGKEY="DE7253E4"

#=========rbenv=================
#export PATH="$HOME/.rbenv/bin:$PATH"
#eval "$(rbenv init -)"
#========env ==================
# if which rbenv > /dev/null; then eval "$(rbenv init -)"; fi
#export PYENV_ROOT="$HOME/.pyenv"
#export PATH="$PYENV_ROOT/bin:$PATH"
#if which pyenv > /dev/null; then eval "$(pyenv init --path)"; fi
#export PATH="$PYENV_ROOT/versions/$(pyenv global)/bin:$PATH"
#eval "$(pyenv virtualenv-init -)"
#========phpenv================
#export PHPENV_ROOT="$HOME/.phpenv"
#export PATH="$PATH:$PHPENV_ROOT/bin"
#eval "$(phpenv init -)"
#========goup=====================
export GOPATH=$HOME/.golang
#export GOROOT=$HOME/.go/current
[ -s "$GOPATH/env" ] && source "$GOPATH/env"
export PATH=$PATH:$GOPATH/bin
#========nvm====================
#export NVM_DIR="$HOME/.nvm"
#[ -s "$NVM_DIR/nvm.sh" ] && source "$NVM_DIR/nvm.sh"
# source $(brew --prefix nvm)/nvm.sh
#=========android===============
export ANDROID_HOME=$HOME/Library/Android/sdk
export PATH=$PATH:${ANDROID_HOME}/platform-tools

#export PATH=/usr/local/opt/qt/bin:$PATH
#export PATH=$PATH:/usr/local/opt/llvm/bin:~/bin
#=========rust==================
#export PATH="$HOME/.cargo/bin:$PATH"
#[ -s "$HOME/.cargo/env" ] && source "$HOME/.cargo/env"
#export RUSTUP_DIST_SERVER=https://mirrors.tuna.tsinghua.edu.cn/rustup
#=========haskell===================
#[ -s "$HOME/.ghcup/env" ] && source "$HOME/.ghcup/env"
#=========aliases===================
#alias aria2web="aria2c --enable-rpc --rpc-listen-all"
#alias aria2rpc="aria2c --conf-path=$HOME/.aria2/aria2_rpc.conf"
#alias brewss="ALL_PROXY=socks5://localhost:1080 brew"
#alias brewcow="HTTP_PROXY=http://127.0.0.1:7777 brew"
alias dockerustc="docker --registry-mirror=https://docker.mirrors.ustc.edu.cn"
alias npmustc="npm --registry http://npmreg.mirrors.ustc.edu.cn"
alias npmtaobao="npm --registry https://registry.npmmirror.com"
#alias rscp='rsync -v -P -e ssh'
#alias gc1='git clone --depth=1'

#export HOMEBREW_GITHUB_API_TOKEN="eb967438f7b730b225e96237f132b176939bfd12"
#export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles
#export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles

#export HISTSIZE=2000
#export HISTFILE="$HOME/.history"
#export SAVEHIST=$HISTSIZE

#source $HOME/ROS/catkin_ws/devel/setup.zsh
#source $HOME/ROS/ros_catkin_ws/install_isolated/setup.zsh
#workon ros3
#export ROS_PACKAGE_PATH=$HOME/catkin_ws/src:$ROS_PACKAGE_PATH
export LC_ALL="zh_CN.UTF-8"
export LANG="zh_CN.UTF-8"

export PATH="$PATH:$HOME/.local/bin:$HOME/.texlive/2024/bin/universal-darwin"
#export PATH="$PATH:$HOME/.local/bin"

#if [[ -s ~/.nix-profile/bin/fzf ]]; then
#   source ~/.nix-profile/share/fzf/completion.zsh
#   source ~/.nix-profile/share/fzf/key-bindings.zsh
#fi
#CFLAGS="$CFLAGS -I~/.nix-profile/include"
#LDFLAGS="$LDFLAGS -L~/.nix-profile/lib"
#PKG_CONFIG_PATH="$HOME/.nix-profile/lib/pkgconfig"

#export NIX_PATH=$HOME/.nix-defexpr/channels:/nix/var/nix/profiles/per-user/guoqiang/channels${NIX_PATH:+:$NIX_PATH}

#alias nix-shell='nix-shell --command "zsh"'
#==========asdf============
#export ASDF_HOME="$HOME/.asdf"
#[ -s "$ASDF_HOME/asdf.sh" ] && source "$ASDF_HOME/asdf.sh"
#=========nix========
#source ~/.nix-profile/etc/profile.d/nix.sh
#export FPATH=$FPATH:$HOME/.nix-profile/share/zsh/site-functions

#export NIX_PATH=${NIX_PATH:+$NIX_PATH:}$HOME/.nix-defexpr/channels
#source ~/.spack/share/spack/setup-env.sh

## aliases
#General
alias h="history"
alias c="clear"
alias rscp="rsync -v -P -e ssh"
#Git
alias gc1="git clone --depth=1"
alias gtr='git tag -d $(git tag) && git fetch --tags' # Refresh local tags from remote
alias ggp='git push origin $(current_branch)'
alias gco='git checkout'
alias gcb='git checkout -b'
alias glol="git log --graph --pretty='%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ar) %C(bold blue)<%an>%Creset'"
alias gdt='git diff-tree --no-commit-id --name-only -r'
alias glog='git log --oneline --decorate --graph'

# Emacs
alias me="emacs -Q -l $EMACSD/init-mini.el" # mini emacs
alias mte="emacs -Q -nw -l $EMACSD/init-mini.el" # mini terminal emacs
alias e="$EDITOR -n"
alias ec="$EDITOR -n -c"
alias ef="$EDITOR -c"
alias te="$EDITOR -nw"
alias rte="$EDITOR -e '(let ((last-nonmenu-event nil) (kill-emacs-query-functions nil)) (save-buffers-kill-emacs t))' && te"
alias magit='emacsclient -a emacs -e "(magit-status \"$(git rev-parse --show-toplevel)\")"; if [[ -f `which osascript` ]]; then osascript -e "tell application \"Emacs\" to activate"; fi'


# Upgrade
alias upgrade_repo='git pull --rebase --stat origin master'
alias upgrade_dotfiles='cd $DOTFILES && upgrade_repo; cd - >/dev/null'
# alias upgrade_emacs='emacs -Q --batch -L "$EMACSD/lisp/" -l "init-funcs.el" -l "init-package.el" --eval "(update-config-and-packages t t)"'
alias upgrade_omt='cd $HOME/.tmux && upgrade_repo; cd - >/dev/null'
alias upgrade_env='upgrade_dotfiles; sh $DOTFILES/install.sh'

alias upgrade_cargo='cargo install-update -a' # cargo install cargo-update
alias upgrade_gem='gem update && gem cleanup'
alias upgrade_go='GO111MODULE=on && $DOTFILES/install_go.sh'
alias upgrade_npm='for package in $(npm -g outdated --parseable --depth=0 | cut -d: -f2); do npm -g install "$package"; done'
alias upgrade_pip="pip3 list --outdated --format=json | python3 -c '
import json
import sys

for item in json.loads(sys.stdin.read()):
    print(\"=\".join([item[\"name\"], item[\"latest_version\"]]))
' | grep -v '^\-e' | cut -d = -f 1 | xargs -n1 pip3 install -U"

#Proxy
PROXY=http://127.0.0.1:7890
SOCK_PROXY=socks5://127.0.0.1:7890 
NO_PROXY=10.*.*.*,192.168.*.*,*.local,localhost,127.0.0.1
alias showproxy='echo "proxy=$http_proxy"'
alias setproxy='export http_proxy=$PROXY https_proxy=$PROXY all_proxy=$SOCK_PROXY no_proxy=$NO_PROXY; showproxy'
