# Zsh configuration

# vars
EMACSD=$HOME/.emacs.d

#
# Utilities
#

zstyle ':completion:*:descriptions' format '[%d]'
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*:git-checkout:*' sort false
zstyle ':completion:*:*:*:*:processes' command 'ps -u $USER -o pid,user,comm -w -w'
zstyle ':fzf-tab:*' switch-group ',' '.'
zstyle ':fzf-tab:complete:(cd|ls|eza|bat|cat|emacs|nano|vi|vim):*' fzf-preview 'eza -1 --color=always $realpath'
zstyle ':fzf-tab:complete:(kill|ps):argument-rest' fzf-preview \
       '[[ $group == "[process ID]" ]] &&
        if [[ $OSTYPE == darwin* ]]; then
           ps -p $word -o comm="" -w -w
        elif [[ $OSTYPE == linux* ]]; then
           ps --pid=$word -o cmd --no-headers -w -w
        fi'
zstyle ':fzf-tab:complete:(kill|ps):argument-rest' fzf-flags '--preview-window=down:3:wrap'

# GIT heart FZF
# @see https://junegunn.kr/2016/07/fzf-git/
is_in_git_repo() {
    git rev-parse HEAD > /dev/null 2>&1
}

fzf-down() {
    fzf --height 50% --min-height 20 --border --bind ctrl-/:toggle-preview "$@"
}

_gf() {
    is_in_git_repo || return
    git -c color.status=always status --short |
        fzf-down -m --ansi --nth 2..,.. \
                 --preview '(git diff --color=always -- {-1} | sed 1,4d; cat {-1})' |
        cut -c4- | sed 's/.* -> //'
}

_gb() {
    is_in_git_repo || return
    git branch -a --color=always | grep -v '/HEAD\s' | sort |
        fzf-down --ansi --multi --tac --preview-window right:70% \
                 --preview 'git log --oneline --graph --date=short --color=always --pretty="format:%C(auto)%cd %h%d %s" $(sed s/^..// <<< {} | cut -d" " -f1)' |
        sed 's/^..//' | cut -d' ' -f1 |
        sed 's#^remotes/##'
}

_gt() {
    is_in_git_repo || return
    git tag --sort -version:refname |
        fzf-down --multi --preview-window right:70% \
                 --preview 'git show --color=always {}'
}

_gh() {
    is_in_git_repo || return
    git log --date=short --format="%C(green)%C(bold)%cd %C(auto)%h%d %s (%an)" --graph --color=always |
        fzf-down --ansi --no-sort --reverse --multi --bind 'ctrl-s:toggle-sort' \
                 --header 'Press CTRL-S to toggle sort' \
                 --preview 'grep -o "[a-f0-9]\{7,\}" <<< {} | xargs git show --color=always' |
        grep -o "[a-f0-9]\{7,\}"
}

_gr() {
    is_in_git_repo || return
    git remote -v | awk '{print $1 "\t" $2}' | uniq |
        fzf-down --tac \
                 --preview 'git log --oneline --graph --date=short --pretty="format:%C(auto)%cd %h%d %s" {1}' |
        cut -d$'\t' -f1
}

_gs() {
    is_in_git_repo || return
    git stash list | fzf-down --reverse -d: --preview 'git show --color=always {1}' |
        cut -d: -f1
}

join-lines() {
    local item
    while read item; do
        echo -n "${(q)item} "
    done
}

bind-git-helper() {
    local c
    for c in $@; do
        eval "fzf-g$c-widget() { local result=\$(_g$c | join-lines); zle reset-prompt; LBUFFER+=\$result }"
        eval "zle -N fzf-g$c-widget"
        eval "bindkey '^g^$c' fzf-g$c-widget"
    done
}
bind-git-helper f b t r h s
unset -f bind-git-helper

# For GNU ls (the binaries can be gls, gdircolors, e.g. on OS X when installing the
# coreutils package from Homebrew; you can also use https://github.com/ogham/exa)
#zinit ice atclone"dircolors -b LS_COLORS > c.zsh" atpull'%atclone' pick"c.zsh" nocompile'!'
#zinit light trapd00r/LS_COLORS

#;;; extra paths
[ -f $HOME/.env.local ] && source $HOME/.env.local

# OS bundles
if [[ $OSTYPE == darwin* ]]; then
    #zinit snippet PZTM::osx
    if (( $+commands[brew] )); then
        alias bu='brew update && brew upgrade'
        alias bcu='brew cu --all --yes --cleanup'
        alias bua='bu && bcu'
    elif (( $+commands[nix] )); then
        alias ncu='nix-channel --update && nix-env -u'
        alias nd='nix-collect-garbage -d'
        alias nu='nix-env -u'
        alias ni='nix-env -iA'
        alias nr='nix-env -e'
    fi
elif [[ $OSTYPE == linux* ]]; then
    if (( $+commands[apt-get] )); then
        #zinit snippet OMZP::ubuntu
        alias agua='aguu -y && agar -y && aga -y'
        alias kclean+='sudo aptitude remove -P "?and(~i~nlinux-(ima|hea),\
                                ?not(?or(~n`uname -r | cut -d'\''-'\'' -f-2`,\
                                ~nlinux-generic,\
                                ~n(linux-(virtual|headers-virtual|headers-generic|image-virtual|image-generic|image-`dpkg --print-architecture`)))))"'
    elif (( $+commands[pacman] )); then
        #zinit snippet OMZP::archlinux
    fi
fi


#
# Aliases
#

# Unalias the original fd in oh-my-zsh
# alias fd >/dev/null && unalias fd

# General
alias zshconf="$EDITOR $HOME/.zshrc; $EDITOR $HOME/.zshrc.local"
#alias h='history'
#alias c='clear'

# Ugrep
if (( $+commands[ugrep] )) ; then
    alias uq='ug -Q'       # short & quick query TUI (interactive, uses .ugrep config)
    alias ux='ug -UX'      # short & quick binary pattern search (uses .ugrep config)
    alias uz='ug -z'       # short & quick compressed files and archives search (uses .ugrep config)

    alias ugit='ug -R --ignore-files' # works like git-grep & define your preferences in .ugrep config

    alias grep='ugrep -G'    # search with basic regular expressions (BRE)
    alias egrep='ugrep -E'    # search with extended regular expressions (ERE)
    alias fgrep='ugrep -F'    # find string(s)
    alias pgrep='ugrep -P'    # search with Perl regular expressions
    alias xgrep='ugrep -W'    # search (ERE) and output text or hex for binary

    alias zgrep='ugrep -zG'   # search compressed files and archives with BRE
    alias zegrep='ugrep -zE'   # search compressed files and archives with ERE
    alias zfgrep='ugrep -zF'   # find string(s) in compressed files and/or archives
    alias zpgrep='ugrep -zP'   # search compressed files and archives with Perl regular expressions
    alias zxgrep='ugrep -zW'   # search (ERE) compressed files/archives and output text or hex for binary

    alias xdump='ugrep -X ""' # hexdump files without searching
fi

# alias upgrade_zinit='sh -c "$(curl -fsSL https://raw.githubusercontent.com/zdharma-continuum/zinit/master/doc/install.sh)"; (( $+functions[zinit] )) && zinit update'

[ -f $HOME/.zsh/percol.zsh ] && source $HOME/.zsh/percol.local
[ -f $HOME/.iterm2_shell_integration.zsh ] && source $HOME/.iterm2_shell_integration.zsh

 (( $+commands[rtx] )) && eval "$(rtx activate zsh)" 

